import json
import os
from datetime import datetime
from typing import Dict, List, Any


class TestReporter:
    def __init__(self):
        self.test_results = {
            'canonical': {'passed': 0, 'failed': 0, 'errors': []},
            'doubles': {'passed': 0, 'failed': 0, 'errors': []}
        }
        self.total_stats = {
            'sites': 0,
            'pages': 0,
            'success': 0,
            'errors': 0,
            'success_rate': 0.0
        }
        self.seo_elements = {
            'title': {'total': 0, 'passed': 0, 'rate': 0.0},
            'description': {'total': 0, 'passed': 0, 'rate': 0.0}
        }
        self.site_details = {}
    
    def add_test_result(self, test_type: str, passed: bool, error_message: str = None, site: str = None, url: str = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if test_type in self.test_results:
            if passed:
                self.test_results[test_type]['passed'] += 1
            else:
                self.test_results[test_type]['failed'] += 1
                if error_message:
                    self.test_results[test_type]['errors'].append({
                        'site': site,
                        'url': url,
                        'error': error_message
                    })
    
    def add_seo_element_result(self, element_type: str, passed: bool):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ SEO —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if element_type in self.seo_elements:
            self.seo_elements[element_type]['total'] += 1
            if passed:
                self.seo_elements[element_type]['passed'] += 1
    
    def add_site_detail(self, site: str, detail: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ —Å–∞–π—Ç—É"""
        if site not in self.site_details:
            self.site_details[site] = []
        self.site_details[site].append(detail)
    
    def calculate_totals(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_passed = sum(result['passed'] for result in self.test_results.values())
        total_failed = sum(result['failed'] for result in self.test_results.values())
        total_tests = total_passed + total_failed
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –∏–∑ –æ—à–∏–±–æ–∫
        sites = set()
        for test_type in self.test_results.values():
            for error in test_type['errors']:
                if error.get('site'):
                    sites.add(error['site'])
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–π—Ç—ã –ø–æ URL –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        if not sites:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∞–π—Ç–æ–≤ –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
            pass
        
        self.total_stats.update({
            'sites': len(sites),
            'pages': total_tests,
            'success': total_passed,
            'errors': total_failed,
            'success_rate': (total_passed / total_tests * 100) if total_tests > 0 else 0.0
        })
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É SEO —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for element_type in self.seo_elements:
            total = self.seo_elements[element_type]['total']
            passed = self.seo_elements[element_type]['passed']
            self.seo_elements[element_type]['rate'] = (passed / total * 100) if total > 0 else 0.0
    
    def generate_instagram_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Instagram"""
        self.calculate_totals()
        
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤
        canonical_total = self.test_results['canonical']['passed'] + self.test_results['canonical']['failed']
        doubles_total = self.test_results['doubles']['passed'] + self.test_results['doubles']['failed']
        
        canonical_success_rate = (self.test_results['canonical']['passed'] / canonical_total * 100) if canonical_total > 0 else 0.0
        doubles_success_rate = (self.test_results['doubles']['passed'] / doubles_total * 100) if doubles_total > 0 else 0.0
        
        report = f"""üìä –û–¢–ß–ï–¢ –ö–ê–ù–û–ù–ò–ö–õ–´
{current_time}

üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
üìÑ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_stats['pages']}
‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.total_stats['success']}
‚ùå –û—à–∏–±–æ–∫: {self.total_stats['errors']}
üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {self.total_stats['success_rate']:.1f}%

üîç –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –¢–ï–°–¢–û–í:
üìù –ö–∞–Ω–æ–Ω–∏–∫–ª—ã: {self.test_results['canonical']['passed']}/{canonical_total} ({canonical_success_rate:.1f}%)
üìÑ –î—É–±–ª–∏: {self.test_results['doubles']['passed']}/{doubles_total} ({doubles_success_rate:.1f}%)"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —Å–∞–π—Ç–∞–º —Å –æ—à–∏–±–∫–∞–º–∏
        if self.total_stats['errors'] > 0:
            report += "\n\nüåê –û–®–ò–ë–ö–ò –í –¢–ï–°–¢–ê–•:"
            
            # –û—à–∏–±–∫–∏ –≤ –∫–∞–Ω–æ–Ω–∏–∫–ª–∞—Ö
            if self.test_results['canonical']['errors']:
                report += "\n\nüìù –ö–ê–ù–û–ù–ò–ö–õ–´:"
                for error in self.test_results['canonical']['errors']:
                    site = error.get('site', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∞–π—Ç')
                    url = error.get('url', '')
                    error_msg = error.get('error', '–û—à–∏–±–∫–∞')
                    report += f"\n‚ùå {site}: {error_msg}"
                    if url:
                        report += f"\n   URL: {url}"
            
            # –û—à–∏–±–∫–∏ –≤ –¥—É–±–ª—è—Ö
            if self.test_results['doubles']['errors']:
                report += "\n\nüìÑ –î–£–ë–õ–ò:"
                for error in self.test_results['doubles']['errors']:
                    site = error.get('site', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∞–π—Ç')
                    url = error.get('url', '')
                    error_msg = error.get('error', '–û—à–∏–±–∫–∞')
                    report += f"\n‚ùå {site}: {error_msg}"
                    if url:
                        report += f"\n   URL: {url}"
        else:
            report += "\n\nüåê –û–®–ò–ë–ö–ò –í –¢–ï–°–¢–ê–•:\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
        
        return report
    
    def save_results(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"""
        if not filename:
            filename = f"test_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        results = {
            'timestamp': datetime.now().isoformat(),
            'test_results': self.test_results,
            'total_stats': self.total_stats,
            'seo_elements': self.seo_elements,
            'site_details': self.site_details
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        return filename


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞
reporter = TestReporter()
